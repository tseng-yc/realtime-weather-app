[{"/Users/Janice/Desktop/realtime-weather-app/src/serviceWorkerRegistration.js":"1","/Users/Janice/Desktop/realtime-weather-app/src/components/WeatherApp.js":"2","/Users/Janice/Desktop/realtime-weather-app/src/reportWebVitals.js":"3","/Users/Janice/Desktop/realtime-weather-app/src/index.js":"4","/Users/Janice/Desktop/realtime-weather-app/src/components/WeatherIcon.js":"5","/Users/Janice/Desktop/realtime-weather-app/src/components/WeatherCard.js":"6","/Users/Janice/Desktop/realtime-weather-app/src/components/useWeatherApi.js":"7","/Users/Janice/Desktop/realtime-weather-app/src/components/WeatherSetting.js":"8","/Users/Janice/Desktop/realtime-weather-app/src/components/utils.js":"9"},{"size":5092,"mtime":1608312516257,"results":"10","hashOfConfig":"11"},{"size":4837,"mtime":1608490468099,"results":"12","hashOfConfig":"11"},{"size":364,"mtime":1608310149879,"results":"13","hashOfConfig":"11"},{"size":850,"mtime":1608312638345,"results":"14","hashOfConfig":"11"},{"size":3600,"mtime":1608482597272,"results":"15","hashOfConfig":"11"},{"size":3856,"mtime":1608489547580,"results":"16","hashOfConfig":"11"},{"size":4744,"mtime":1608490139419,"results":"17","hashOfConfig":"11"},{"size":5006,"mtime":1608532571800,"results":"18","hashOfConfig":"11"},{"size":2100,"mtime":1608489214693,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5xebsy",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Janice/Desktop/realtime-weather-app/src/serviceWorkerRegistration.js",[],"/Users/Janice/Desktop/realtime-weather-app/src/components/WeatherApp.js",["39"],"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from '@emotion/react';\nimport WeatherCard from './WeatherCard';\nimport useWeatherApi from './useWeatherApi';\nimport sunriseAndSunsetData from '../sunrise-sunset.json';\nimport WeatherSetting from './WeatherSetting';\nimport { findLocation } from './utils';\n\nconst getMoment = (locationName) => {\n  // 從日出日落時間中找出符合的地區\n  const location = sunriseAndSunsetData.find(\n    (data) => data.locationName === locationName\n  );\n  // 找不到的話則回傳 null\n  if (!location) return null;\n\n  // 取得當前時間\n  const now = new Date();\n\n  // 將當前時間以 \"2019-10-08\" 的時間格式呈現\n  const nowDate = Intl.DateTimeFormat('zh-TW', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n  })\n    .format(now)\n    .replace(/\\//g, '-');\n  // 從該地區中找到對應的日期\n  const locationDate =\n    location.time && location.time.find((time) => time.dataTime === nowDate);\n\n  // 將日出日落以及當前時間轉成時間戳記（TimeStamp）\n  const sunriseTimestamp = new Date(\n    `${locationDate.dataTime} ${locationDate.sunrise}`\n  ).getTime();\n  const sunsetTimestamp = new Date(\n    `${locationDate.dataTime} ${locationDate.sunset}`\n  ).getTime();\n  const nowTimeStamp = now.getTime();\n\n  // 若當前時間介於日出和日落中間，則表示為白天，否則為晚上\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp\n    ? 'day'\n    : 'night';\n};\n\nconst theme = {\n  light: {\n    backgroundColor: '#ededed',\n    foregroundColor: '#f9f9f9',\n    boxShadow: '0 1px 3px 0 #999999',\n    titleColor: '#212121',\n    temperatureColor: '#757575',\n    textColor: '#828282',\n  },\n  dark: {\n    backgroundColor: '#1F2022',\n    foregroundColor: '#121416',\n    boxShadow:\n      '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc',\n  },\n};\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst WeatherApp = () => {\n  //從 localStorage 取出 cityName，並取名為 storageCity\n  const storageCity = localStorage.getItem('cityName');\n  //若 storageCity 存在則作為 currentCity 的預設值，否則使用 '臺北市'\n  const [currentCity, setCurrentCity] = useState(storageCity || '臺北市');\n  //使用 useState 定義當前要拉取天氣資訊的地區，預設值先定為「臺北市」\n  // const [currentCity, setCurrentCity] = useState('臺北市');\n  //根據 currentCity 來找出對應到不同 API 時顯示的地區名稱，找到的地區取名為 locationInfo\n  const currentLocation = findLocation(currentCity) || {};\n\n  const [weatherElement, fetchData] = useWeatherApi(currentLocation);\n  const [currentPage, setCurrentPage] = useState('WeatherCard');\n\n  const [currentTheme, setCurrentTheme] = useState('light');\n\n  //現在可以使用 currentLocation 取得地區名稱，因此移除這個多餘的程式碼\n  //   const { locationName } = weatherElement;\n\n  //透過 useMemo 避免每次都須重新計算取值，記得帶入 dependencies\n  // const moment = useMemo(() => getMoment(locationName), [locationName]);\n  //根據日出日落資料的地區名稱，找出對應的日出日落時間\n  const moment = useMemo(() => getMoment(currentLocation.sunriseCityName), [\n    currentLocation.sunriseCityName,\n  ]);\n\n  // 根據 moment 決定要使用亮色或暗色主題\n  useEffect(() => {\n    setCurrentTheme(moment === 'day' ? 'light' : 'dark');\n    // 記得把 moment 放入 dependencies 中\n  }, [moment]);\n\n  //當 currentCity 有改變的時候，儲存到 localStorage 中\n  useEffect(() => {\n    localStorage.setItem('cityName', currentCity);\n    //dependencies 中放入 currentCity\n  }, [currentCity]);\n\n  //可以試著添加看看一些功能，也許是點擊畫面的時候切換主題色彩\n\n  return (\n    <ThemeProvider theme={theme[currentTheme]}>\n      <Container>\n        {/* 利用條件渲染的方式決定要呈現哪個組件 */}\n        {currentPage === 'WeatherCard' && (\n          <WeatherCard\n            cityName={currentLocation.cityName}\n            weatherElement={weatherElement}\n            moment={moment}\n            fetchData={fetchData}\n            setCurrentPage={setCurrentPage}\n          />\n        )}\n\n        {currentPage === 'WeatherSetting' && (\n          <WeatherSetting\n            cityName={currentLocation.cityName}\n            setCurrentCity={setCurrentCity}\n            setCurrentPage={setCurrentPage}\n          />\n        )}\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default WeatherApp;\n","/Users/Janice/Desktop/realtime-weather-app/src/reportWebVitals.js",[],"/Users/Janice/Desktop/realtime-weather-app/src/index.js",[],"/Users/Janice/Desktop/realtime-weather-app/src/components/WeatherIcon.js",[],"/Users/Janice/Desktop/realtime-weather-app/src/components/WeatherCard.js",[],"/Users/Janice/Desktop/realtime-weather-app/src/components/useWeatherApi.js",[],"/Users/Janice/Desktop/realtime-weather-app/src/components/WeatherSetting.js",[],"/Users/Janice/Desktop/realtime-weather-app/src/components/utils.js",[],{"ruleId":"40","severity":1,"message":"41","line":1,"column":38,"nodeType":"42","messageId":"43","endLine":1,"endColumn":49},"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar"]